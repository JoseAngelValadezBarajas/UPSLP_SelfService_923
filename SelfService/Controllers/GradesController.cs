// --------------------------------------------------------------------
// <copyright file="GradesController.cs" company="Ellucian">
//     Copyright 2018 - 2022 Ellucian Company L.P. and its affiliates.
// </copyright>
// --------------------------------------------------------------------

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using SelfService.Filters;

namespace SelfService.Controllers
{
    /// <summary>
    /// Controller with views for Grades.
    /// </summary>
    /// <seealso cref="BaseController" />
    [Authorize]
    [TypeFilter(typeof(SessionExpiredAttribute))]
    public class GradesController : BaseController
    {
        /// <summary>
        /// Alerts the report.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        [TypeFilter(typeof(RoleAuthorizeAttribute), Arguments = new object[] { new string[] { "AlertReportId" } })]
        public ActionResult AlertReport() => View();

        /// <summary>
        /// Attendance Report View.
        /// </summary>
        /// <returns></returns>
        [TypeFilter(typeof(RoleAuthorizeAttribute), Arguments = new object[] { new string[] { "AttendanceReportId" } })]
        public ActionResult AttendanceReport() => View();

        /// <summary>
        /// Grade Report View
        /// </summary>
        /// <returns></returns>
        [TypeFilter(typeof(RoleAuthorizeAttribute), Arguments = new object[] { new string[] { "GradeReportId" } })]
        public ActionResult GradeReport() => View();

        /// <summary>
        /// Request transcript view.
        /// </summary>
        /// <returns></returns>
        [TypeFilter(typeof(RoleAuthorizeAttribute), Arguments = new object[] { new string[] { "RequestTranscriptId" } })]
        public ActionResult RequestTranscript()
        {
            if (TempData[Constants._paymentTransactionTempData] != null)
                ViewBag.PaymentTransaction = TempData[Constants._paymentTransactionTempData];

            return View();
        }

        /// <summary>
        /// Unofficial transcript view.
        /// </summary>
        /// <returns></returns>
        [TypeFilter(typeof(RoleAuthorizeAttribute), Arguments = new object[] { new string[] { "UnofficialTranscriptId" } })]
        public ActionResult UnofficialTranscript() => View();
    }
}