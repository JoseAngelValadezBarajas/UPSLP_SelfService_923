<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<Header>
		<Title>View component</Title>
		<Author>Ellucian</Author>
		<Shortcut>viewComponent</Shortcut>
		<Description>Code snippet for a view component (container component)</Description>
		<SnippetTypes>
			<SnippetType>React Components</SnippetType>
		</SnippetTypes>
	</Header>
	<Snippet>
		<Declarations>
			<Literal>
				<ID>actionName</ID>
				<ToolTip>MVC Action name</ToolTip>
				<Default>actionName</Default>
			</Literal>
			<Literal>
				<ID>controllerName</ID>
				<ToolTip>MVC Controller name</ToolTip>
				<Default>controllerName</Default>
			</Literal>
			<Literal>
				<ID>name</ID>
				<ToolTip>Name</ToolTip>
				<Default>name</Default>
			</Literal>
			<Literal>
				<ID>year</ID>
				<ToolTip>Year</ToolTip>
				<Default>year</Default>
			</Literal>
		</Declarations>
		<Code Language="TypeScript">
			<![CDATA[/* Copyright $year$ Ellucian Company L.P. and its affiliates.
 * File: $name$View.tsx
 * Type: Container component */

// #region Imports
import React from 'react';
import ReactDOM from 'react-dom';

// Core components
import Layout, { withLayout } from '@hedtech/powercampus-design-system/react/components/Layout';
import Text from '@hedtech/powercampus-design-system/react/core/Text';

// Types
import { ResultType } from '@hedtech/powercampus-design-system/types/ResultType';
import { I$name$Resources } from '../../../Types/Resources/$controllerName$/I$name$Resources';
import { IAlert } from '@hedtech/powercampus-design-system/types/IAlert';
import { IJsonResult } from '@hedtech/powercampus-design-system/types/IJsonResult';
import { ILogData } from '@hedtech/powercampus-design-system/types/ILogData';

// Helpers
import LogData from '@hedtech/powercampus-design-system/helpers/LogData';
import Resolver from '@hedtech/powercampus-design-system/helpers/Resolver';

// Requests
import Requests from '../../../Requests/$controllerName$/$name$';

// State Management
import LayoutActions from '@hedtech/powercampus-design-system/flux/actions/LayoutActions';
import LayoutStore from '@hedtech/powercampus-design-system/flux/stores/LayoutStore';
// #endregion Imports

// #region Types
interface I$name$Res extends I$name$Resources {
  // TODO: If you need it, in other case you can remove it.
}

interface I$name$State {
  isLoading: boolean;
	resources?: I$name$Res;
}
// #endregion Types

// #region Component
class $name$View extends React.Component<any, I$name$State> {
	private idModule: string;
	private idPage: string;

	public readonly state: Readonly<I$name$State>;

	public constructor(props) {
		super(props);

    // #region Initialize Variables and State
		this.idModule = '$controllerName$';
		this.idPage = '$actionName$';
		this.state = this.getInitialState();
    // #endregion Initialize Variables and State

    // #region Bind State Management Listeners
		LayoutStore.addLayoutReadyListener(this.onLayoutReady);
    // #endregion State Management Listeners
	}

	private getInitialState(): I$name$State {
    let isLoading: boolean = true;
		let resources: I$name$Res | undefined;
		if (this.state) {
      isLoading = this.state.isLoading;
      resources = this.state.resources;
		}
		return {
      isLoading: isLoading,
			resources: resources
		};
	}

  // #region Events
  // TODO: If you need it, in other case you can remove it.
  // #endregion Events

  // #region Functions
  // TODO: If you need it, in other case you can remove it.
  // #endregion Functions

  // #region Loader Functions
    private hideAllLoaders = (): void => {
        this.setState({
            isLoading: false
        }, LayoutActions.hidePageLoader);
    };
    // #endregion Loader Functions

  // #region Error Functions
  private logError = (logData: ILogData): void => {
      this.hideAllLoaders();
      LayoutActions.setLogData(logData);
  };

  private redirectError = (code: number): void => {
      this.hideAllLoaders();
      LayoutActions.setRedirectCode(code);
  };

  private showError = (message?: string): void => {
      this.hideAllLoaders();
      LayoutActions.setAlert({ message: message, messageType: ResultType.error } as IAlert);
  };
  // #endregion Error Functions

  // #region Resolvers
  private resolveLayoutReady = (): void => {
      try {
          const {
              resources
          } = this.state;

          if (resources) {
              document.title = resources.lblPageTitle;
              // TODO: Load initial data or data based on the resources
              // If you requiere the loader until all data is loaded,
              // you have to remove it at the end of the last resolver of your flow.
              // Use the next code where you need to remove the initial loader:
              // (It depends of each flow)
              // this.setState({
              //      isLoading: false
              //  }, LayoutActions.hidePageLoader);
          }
          else {
              this.logError(LogData.noResources(this.resolveLayoutReady.name));
          }
      }
      catch (e) {
          this.logError(LogData.fromException(this.resolveLayoutReady.name, e));
      }
  };
  // #endregion Resolvers

  // #region State Management Events
	private onLayoutReady = (): void => {
      const ready: boolean = LayoutStore.getLayoutReady();
      const resources: I$name$Res | undefined = LayoutStore.getResources();

      if (ready) {
          this.setState({
              resources: resources
          }, this.resolveLayoutReady);
      }
      else {
        this.logError(LogData.layoutNoReady(this.onLayoutReady.name));
        this.redirectError(500);
      }
  };
  // #endregion State Management Events

  // #region Lifecycle
  public componentWillUnmount(): void {
      LayoutStore.removeLayoutReadyListener(this.onLayoutReady);
  }
  // #endregion Lifecycle

	public render(): JSX.Element {
		const {
      isLoading,
			resources
		} = this.state;

		let contentPage: JSX.Element | undefined;
		if (resources && !isLoading) {
        contentPage = (
          <Text>
            {"$name$"}
          </Text>
        );
		}

		return (
			<Layout
				idModule={this.idModule}
				idPage={this.idPage}
				showCart
				showNotifications
			>
				{contentPage}
			</Layout>
		);
	}
}

const $name$ViewWithLayout = withLayout($name$View);
// #endregion Component

// RenderDOM: Component
ReactDOM.render(<$name$ViewWithLayout />, document.getElementById('root'));]]>
		</Code>
	</Snippet>
</CodeSnippet>